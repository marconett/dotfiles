set nocompatible
filetype plugin indent on

" Encoding
set encoding=utf-8
set fileformat=unix

" Indentation
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4
set smarttab

" Scrolling
set scrolloff=1
set sidescrolloff=5
set sidescroll=1

" Splitting
set splitbelow
set splitright

" Visual
set t_Co=256
set incsearch
set hlsearch
set cursorline
hi CursorLine cterm=NONE ctermbg=234
hi StatusLine ctermbg=white ctermfg=234

" Paste
set clipboard=unnamed
set pastetoggle=<F2> " Matthias
nnoremap <silent> <Space>p :set paste!<CR> " Marco

function Func()
    :Explore
    :let b:netrw=1
endfunction

" netrw
" :au BufAdd,BufNewFile * nested if exists('b:netrw') | tab sball | endif
" nnoremap - :exec Func()<CR>
" let g:netrw_browse_split = 3
nnoremap - :Explore<CR>
let g:netrw_banner = 0

" Buffers / Tabs
" nnoremap <silent> <Space>2 :tabn<CR>
" nnoremap <silent> <Space>1 :tabp<CR>
" nnoremap <silent> <Space>w :tabclose<CR>
nnoremap <silent> <Space>2 :bn<CR>
nnoremap <silent> <Space>1 :bp<CR>
nnoremap <silent> <Space>w :bd<CR>

" Misc
set ruler
set backspace=indent,eol,start
set complete-=i
set ttimeout
set ttimeoutlen=100
set laststatus=2
set wildmenu
set autoread
set history=100

" Commenting
let s:comment_map = {
    \   "c": '\/\/',
    \   "cpp": '\/\/',
    \   "go": '\/\/',
    \   "java": '\/\/',
    \   "javascript": '\/\/',
    \   "lua": '--',
    \   "scala": '\/\/',
    \   "php": '\/\/',
    \   "python": '#',
    \   "ruby": '#',
    \   "rust": '\/\/',
    \   "sh": '#',
    \   "desktop": '#',
    \   "fstab": '#',
    \   "conf": '#',
    \   "profile": '#',
    \   "bashrc": '#',
    \   "bash_profile": '#',
    \   "mail": '>',
    \   "eml": '>',
    \   "bat": 'REM',
    \   "ahk": ';',
    \   "vim": '"',
    \   "tex": '%',
    \ }

function! ToggleComment()
    if has_key(s:comment_map, &filetype)
        let comment_leader = s:comment_map[&filetype]
        if getline('.') =~ "^\\s*" . comment_leader . " "
            " Uncomment the line
            execute "silent s/^\\(\\s*\\)" . comment_leader . " /\\1/"
        else
            if getline('.') =~ "^\\s*" . comment_leader
                " Uncomment the line
                execute "silent s/^\\(\\s*\\)" . comment_leader . "/\\1/"
            else
                " Comment the line
                execute "silent s/^\\(\\s*\\)/\\1" . comment_leader . " /"
            end
        end
    else
        echo "No comment leader found for filetype"
    end
endfunction

nnoremap <silent>gcc :call ToggleComment()<cr>
vnoremap <silent>gcc :call ToggleComment()<cr>
